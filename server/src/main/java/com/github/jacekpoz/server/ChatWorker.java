package com.github.jacekpoz.server;

import com.github.jacekpoz.common.gson.LocalDateTimeAdapter;
import com.github.jacekpoz.common.gson.SendableAdapter;
import com.github.jacekpoz.common.sendables.Chat;
import com.github.jacekpoz.common.sendables.Sendable;
import com.github.jacekpoz.common.sendables.User;
import com.github.jacekpoz.common.sendables.database.queries.interfaces.Query;
import com.github.jacekpoz.common.sendables.database.results.Result;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import lombok.Getter;
import lombok.Setter;

import java.io.*;
import java.net.Socket;
import java.net.SocketException;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ChatWorker extends Thread {

    @Getter
    private final Socket clientSocket;
    @Getter
    private final Server server;
    @Getter
    @Setter
    private User currentUser;
    @Getter
    @Setter
    private Chat currentChat;
    private final PrintWriter out;
    private final BufferedReader in;

    private final Gson gson;

    public ChatWorker(Socket so, Server se) throws IOException {
        super("ChatThread");
        clientSocket = so;
        server = se;
        out = new PrintWriter(clientSocket.getOutputStream(), true);
        in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        gson = new GsonBuilder()
                .registerTypeAdapter(Sendable.class, new SendableAdapter())
                .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter())
                .create();
    }

    @Override
    public void run() {
        ExecutorService executor = Executors.newCachedThreadPool();

        executor.submit(() -> {
            String inputJSON;
            Result<?> output;
            InputHandler ih = new InputHandler(this);
            QueryHandler qh = new QueryHandler();

            try {
                while ((inputJSON = in.readLine()) != null) {
                    Sendable input = gson.fromJson(inputJSON, Sendable.class);

                    if (input instanceof Query) {
                        output = qh.handleQuery((Query<?>) input);
                        String json = gson.toJson(output, Sendable.class);
                        send(json);
                    } else ih.handleInput(input);
                }
            } catch (SocketException e) {
                e.printStackTrace();
                System.out.println("Thread disconnected: " + this);
                server.getThreads().remove(this);
                try {
                    out.close();
                    in.close();
                    clientSocket.close();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    public void send(String json) {
        out.println(json);
    }

    /*
     * auto generated by intellij
     * **************************
     */
    @Override
    public String toString() {
        return "ChatThread{" +
                "user=" + currentUser +
                "}";
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ChatWorker that = (ChatWorker) o;
        return Objects.equals(currentUser, that.currentUser);
    }
    /*
     * **************************
     */

}
